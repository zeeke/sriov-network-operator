// Code generated by MockGen. DO NOT EDIT.
// Source: host.go

// Package mock_host is a generated GoMock package.
package mock_host

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHostManagerInterface is a mock of HostManagerInterface interface.
type MockHostManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHostManagerInterfaceMockRecorder
}

// MockHostManagerInterfaceMockRecorder is the mock recorder for MockHostManagerInterface.
type MockHostManagerInterfaceMockRecorder struct {
	mock *MockHostManagerInterface
}

// NewMockHostManagerInterface creates a new mock instance.
func NewMockHostManagerInterface(ctrl *gomock.Controller) *MockHostManagerInterface {
	mock := &MockHostManagerInterface{ctrl: ctrl}
	mock.recorder = &MockHostManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostManagerInterface) EXPECT() *MockHostManagerInterfaceMockRecorder {
	return m.recorder
}

// EnableRDMA mocks base method.
func (m *MockHostManagerInterface) EnableRDMA(arg0, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRDMA", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRDMA indicates an expected call of EnableRDMA.
func (mr *MockHostManagerInterfaceMockRecorder) EnableRDMA(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRDMA", reflect.TypeOf((*MockHostManagerInterface)(nil).EnableRDMA), arg0, arg1, arg2)
}

// EnableRDMAOnRHELMachine mocks base method.
func (m *MockHostManagerInterface) EnableRDMAOnRHELMachine() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableRDMAOnRHELMachine")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableRDMAOnRHELMachine indicates an expected call of EnableRDMAOnRHELMachine.
func (mr *MockHostManagerInterfaceMockRecorder) EnableRDMAOnRHELMachine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableRDMAOnRHELMachine", reflect.TypeOf((*MockHostManagerInterface)(nil).EnableRDMAOnRHELMachine))
}

// GetOSPrettyName mocks base method.
func (m *MockHostManagerInterface) GetOSPrettyName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOSPrettyName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOSPrettyName indicates an expected call of GetOSPrettyName.
func (mr *MockHostManagerInterfaceMockRecorder) GetOSPrettyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOSPrettyName", reflect.TypeOf((*MockHostManagerInterface)(nil).GetOSPrettyName))
}

// InstallRDMA mocks base method.
func (m *MockHostManagerInterface) InstallRDMA(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallRDMA", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallRDMA indicates an expected call of InstallRDMA.
func (mr *MockHostManagerInterfaceMockRecorder) InstallRDMA(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallRDMA", reflect.TypeOf((*MockHostManagerInterface)(nil).InstallRDMA), arg0)
}

// IsCoreOS mocks base method.
func (m *MockHostManagerInterface) IsCoreOS() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCoreOS")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCoreOS indicates an expected call of IsCoreOS.
func (mr *MockHostManagerInterfaceMockRecorder) IsCoreOS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCoreOS", reflect.TypeOf((*MockHostManagerInterface)(nil).IsCoreOS))
}

// IsKernelModuleLoaded mocks base method.
func (m *MockHostManagerInterface) IsKernelModuleLoaded(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKernelModuleLoaded", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsKernelModuleLoaded indicates an expected call of IsKernelModuleLoaded.
func (mr *MockHostManagerInterfaceMockRecorder) IsKernelModuleLoaded(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKernelModuleLoaded", reflect.TypeOf((*MockHostManagerInterface)(nil).IsKernelModuleLoaded), arg0)
}

// IsRHELSystem mocks base method.
func (m *MockHostManagerInterface) IsRHELSystem() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRHELSystem")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRHELSystem indicates an expected call of IsRHELSystem.
func (mr *MockHostManagerInterfaceMockRecorder) IsRHELSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRHELSystem", reflect.TypeOf((*MockHostManagerInterface)(nil).IsRHELSystem))
}

// IsUbuntuSystem mocks base method.
func (m *MockHostManagerInterface) IsUbuntuSystem() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUbuntuSystem")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUbuntuSystem indicates an expected call of IsUbuntuSystem.
func (mr *MockHostManagerInterfaceMockRecorder) IsUbuntuSystem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUbuntuSystem", reflect.TypeOf((*MockHostManagerInterface)(nil).IsUbuntuSystem))
}

// LoadKernelModule mocks base method.
func (m *MockHostManagerInterface) LoadKernelModule(name string, args ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadKernelModule", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadKernelModule indicates an expected call of LoadKernelModule.
func (mr *MockHostManagerInterfaceMockRecorder) LoadKernelModule(name interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKernelModule", reflect.TypeOf((*MockHostManagerInterface)(nil).LoadKernelModule), varargs...)
}

// RdmaIsLoaded mocks base method.
func (m *MockHostManagerInterface) RdmaIsLoaded() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RdmaIsLoaded")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RdmaIsLoaded indicates an expected call of RdmaIsLoaded.
func (mr *MockHostManagerInterfaceMockRecorder) RdmaIsLoaded() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RdmaIsLoaded", reflect.TypeOf((*MockHostManagerInterface)(nil).RdmaIsLoaded))
}

// ReloadDriver mocks base method.
func (m *MockHostManagerInterface) ReloadDriver(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadDriver", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadDriver indicates an expected call of ReloadDriver.
func (mr *MockHostManagerInterfaceMockRecorder) ReloadDriver(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadDriver", reflect.TypeOf((*MockHostManagerInterface)(nil).ReloadDriver), arg0)
}

// TriggerUdevEvent mocks base method.
func (m *MockHostManagerInterface) TriggerUdevEvent() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerUdevEvent")
	ret0, _ := ret[0].(error)
	return ret0
}

// TriggerUdevEvent indicates an expected call of TriggerUdevEvent.
func (mr *MockHostManagerInterfaceMockRecorder) TriggerUdevEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerUdevEvent", reflect.TypeOf((*MockHostManagerInterface)(nil).TriggerUdevEvent))
}

// TryEnableRdma mocks base method.
func (m *MockHostManagerInterface) TryEnableRdma() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryEnableRdma")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryEnableRdma indicates an expected call of TryEnableRdma.
func (mr *MockHostManagerInterfaceMockRecorder) TryEnableRdma() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableRdma", reflect.TypeOf((*MockHostManagerInterface)(nil).TryEnableRdma))
}

// TryEnableTun mocks base method.
func (m *MockHostManagerInterface) TryEnableTun() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableTun")
}

// TryEnableTun indicates an expected call of TryEnableTun.
func (mr *MockHostManagerInterfaceMockRecorder) TryEnableTun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableTun", reflect.TypeOf((*MockHostManagerInterface)(nil).TryEnableTun))
}

// TryEnableVhostNet mocks base method.
func (m *MockHostManagerInterface) TryEnableVhostNet() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TryEnableVhostNet")
}

// TryEnableVhostNet indicates an expected call of TryEnableVhostNet.
func (mr *MockHostManagerInterfaceMockRecorder) TryEnableVhostNet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryEnableVhostNet", reflect.TypeOf((*MockHostManagerInterface)(nil).TryEnableVhostNet))
}
